apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-controller-leader-nginx
  namespace: jans
data:
  use-http2: "false"

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-base
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/app-root: "/jans-auth"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-openid-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/openid-configuration /jans-auth/.well-known/openid-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-auth/.well-known/openid-configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/openid-configuration
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-uma2-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/uma2-configuration /jans-auth/restv1/uma2-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-auth/restv1/uma2-configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/uma2-configuration
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-simple-web-discovery
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/simple-web-discovery /jans-auth/.well-known/simple-web-discovery$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-auth/.well-known/simple-web-discovery
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/simple-web-discovery
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-auth
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/ssl-services: "jans-auth"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /jans-auth
        backend:
          serviceName: jans-auth
          servicePort: 8080

# ====
# SCIM
# ====

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-scim
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/ssl-services: "jans-scim"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /jans-scim
        backend:
          serviceName: jans-scim
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-scim-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/scim-configuration /jans-scim/restv1/scim-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-scim/restv1/scim-configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/scim-configuration
        backend:
          serviceName: jans-scim
          servicePort: 8080

# =====
# FIDO2
# =====

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-fido2-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido2-configuration /jans-fido2/restv1/configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-fido2/restv1/configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/fido2-configuration
        backend:
          serviceName: jans-fido2
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-fido-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido-configuration /jans-auth/restv1/fido-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-auth/restv1/fido-configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/fido-configuration
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-fido-u2f-configuration
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/configuration-snippet: "rewrite /.well-known/fido-u2f-configuration /jans-auth/restv1/fido-configuration$1 break;"
    nginx.ingress.kubernetes.io/rewrite-target: /jans-auth/restv1/fido-configuration
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /.well-known/fido-u2f-configuration
        backend:
          serviceName: jans-auth
          servicePort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: jans-ingress-fido2
  namespace: jans
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.org/ssl-services: "jans-fido2"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_500 http_502 http_503 http_504"
spec:
  tls:
    - hosts:
      - demoexample.jans.io
      secretName: tls-certificate
  rules:
  - host: demoexample.jans.io
    http:
      paths:
      - path: /jans-fido2
        backend:
          serviceName: jans-fido2
          servicePort: 8080
